<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby, | Code by Codes]]></title>
  <link href="http://www.codebycodes.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.codebycodes.com/"/>
  <updated>2016-06-09T21:14:14-04:00</updated>
  <id>http://www.codebycodes.com/</id>
  <author>
    <name><![CDATA[Cody Norman]]></name>
    <email><![CDATA[wcodynorman@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Simple Twitter Bot With Ruby]]></title>
    <link href="http://www.codebycodes.com/blog/2015/08/31/creating-a-simeple-twitter-bot-with-ruby/"/>
    <updated>2015-08-31T20:09:41-04:00</updated>
    <id>http://www.codebycodes.com/blog/2015/08/31/creating-a-simeple-twitter-bot-with-ruby</id>
    <content type="html"><![CDATA[<p>Let me preface this by saying I&rsquo;m not always the biggest fan of Twitter bots.  With that said, they can be useful and fun to build.  Here is a quick rundown of creating a simple Twitter bot in Ruby.</p>

<p>First off, you will need to have an existing Twitter account. If you&rsquo;d like to create a new account just for the bot you&rsquo;ll also need a phone number.  The easiest way to take care of this is to create a new google voice number if you&rsquo;ve already used your phone number for your primary twitter account.  Head over to <a href="https://apps.twitter.com/">https://apps.twitter.com/</a> to create a new app that can communicate with Twitter&rsquo;s API.</p>

<p><img class="center <a" src="href="https://s3.amazonaws.com/codebycodes-blog-images/images/Screen+Shot+2015-08-31+at+8.33.03+AM.png">https://s3.amazonaws.com/codebycodes-blog-images/images/Screen+Shot+2015-08-31+at+8.33.03+AM.png</a>&#8221; width=&#8221;700&#8221; height=&#8221;450&#8221; title=&#8221;&lsquo;image&rsquo; &lsquo;images&rsquo;&#8221; ></p>

<!--more-->


<p>It requires the app&rsquo;s Name, Description, and URL.  Fill out the info.  You can use something like &ldquo;<a href="http://www.example.com">http://www.example.com</a>&rdquo; to get started with and update it later. Also, the Name must be unique so something like &lsquo;Test&rsquo; is probably going to be taken.</p>

<p>Fill out the required info and create your new app.  Once that&rsquo;s done, you&rsquo;ll be taken to the Application details page.  Head over to the &ldquo;Key and Access Tokens&rdquo; section next.  This is where you&rsquo;ll find your Consumer Key and Consumer Secret Keys.  There&rsquo;s one more step that we need to do before we&rsquo;re going to be ready to go.  Scroll down to the bottom to &ldquo;Token Actions&rdquo; and create a new access token.  This will create the new &ldquo;Access Token&rdquo; and &ldquo;Access Token Secret&rdquo; needed to connect out bot to Twitter&rsquo;s API.</p>

<p><img class="center <a" src="href="https://s3.amazonaws.com/codebycodes-blog-images/images/Screen+Shot+2015-08-31+at+8.47.05+AM.png">https://s3.amazonaws.com/codebycodes-blog-images/images/Screen+Shot+2015-08-31+at+8.47.05+AM.png</a>&#8221; width=&#8221;700&#8221; height=&#8221;450&#8221; title=&#8221;&lsquo;image&rsquo; &lsquo;images&rsquo;&#8221; ></p>

<p>Now that we have all of keys and tokens situated, we&rsquo;re ready to write some code.</p>

<p>This post is meant to be a quick intro to automating actions using the Twitter gem.  It will be a single file and ran from the command line so feel free to create a Gemfile, and set up a directory structure if you like.</p>

<p>Let&rsquo;s create a directory to keep our bot files in</p>

<p><code>$ mkdir TwitterBot</code></p>

<p><code>$ cd TwitterBot</code></p>

<p><code>$ touch bot.rb</code></p>

<p>Now that we have a directory set up and a <code>bot.rb</code> file created, let&rsquo;s install the Twitter gem:</p>

<p><code>$ gem install twitter</code></p>

<p>Time to write some code, open the <code>bot.rb</code> we created and let&rsquo;s get to work.</p>

<pre><code class="ruby">#!/usr/bin/env ruby

client = Twitter::REST::Client.new do |config|
  config.consumer_key        = "YOUR_CONSUMER_KEY"
  config.consumer_secret     = "YOUR_CONSUMER_SECRET"
  config.access_token        = "YOUR_ACCESS_TOKEN"
  config.access_token_secret = "YOUR_ACCESS_SECRET"
end
</code></pre>

<p>First, I&rsquo;d like to point out the first line at the top <code>#!/usr/bin/env ruby</code>.  Even though it has a <code>#</code> at the beginning, this is not a comment.  It&rsquo;s called a <a href="https://en.wikipedia.org/wiki/Shebang_(Unix">shebang</a>.  This tells the program loader what command to use to run the program.  In our example, it will use the <a href="http://ss64.com/bash/env.html">env</a> command to figure out where the ruby interpreter is to run our program.</p>

<p>Next, we create a client to communicate with the Twitter API.  Fill in the config variables with your information from the Twitter app settings page.  DO NOT CHECK YOUR KEYS INTO VERSION CONTROL!  If you plan on uploading this to GitHub or anywhere else besides your computer, <a href="http://www.schrodinger.com/kb/1842">create Environment Variables</a> for your key information.</p>

<p>Now that we have everything connected, you can send your first tweet.  Add this line below the block where you created the <code>client</code> variable</p>

<pre><code class="ruby">client.update('Tweet from the command line!')
</code></pre>

<p>Check the your Twitter account you used to register the app with, you should see your first tweet from the command line.  Being able to send a tweet from the command line is not terribly useful so let&rsquo;s look into something a little more interesting.  On the gem&rsquo;s Github page, there are a couple useful <a href="https://github.com/sferik/twitter/tree/master/examples">examples</a> to get you started.  To really get an idea of the available options, you&rsquo;ll need to go though the <a href="http://www.rubydoc.info/gems/twitter">docs</a>.</p>

<p>First, let&rsquo;s pull all the recent tweets for our search criteria to make sure everything is working:</p>

<pre><code class="ruby">client.search("#ruby").take(50).each do |tweet|
  puts tweet.text
end
</code></pre>

<p>This example should be pretty self explanatory, but if you&rsquo;re not sure what we&rsquo;re doing here, we&rsquo;re searching for tweets containing &ldquo;#ruby&rdquo;, taking the first 50 results, and printing out the text of the tweet to our console.</p>

<p>If you see the tweets output to your console, you&rsquo;re good to go.  The baic format for the search method is:</p>

<pre><code class="ruby">    client.search("query", {options})
</code></pre>

<p>You can find the available options in the <a href="http://www.rubydoc.info/gems/twitter/Twitter/REST/Search">docs</a>.</p>

<p>With the pope&rsquo;s visit to Philadelphia in about a month, let&rsquo;s say we want to get 50 recent tweets containing the word &ldquo;pope&rdquo;, within a 10 mile radius of Philadelphia, we could do this:</p>

<pre><code class="ruby">search_options = {
    result_type: "recent",
    geocode: "39.9525839,-75.1652215,10mi"
}

client.search("pope", search_options).take(50).each do |tweet|
    puts "#{tweet.user.screen_name}: #{tweet.text}
end
</code></pre>

<p>If you&rsquo;re feeling extra friendly, you can favorite, and reply to their tweet with a message.</p>

<pre><code class="ruby">search_options = {
    result_type: "recent",
    geocode: "39.9525839,-75.1652215,10mi"
}

client.search("pope", search_options).take(50).each do |tweet|
    puts "#{tweet.user.screen_name}: #{tweet.text}
    client.favorite(tweet)
    client.upate("@{tweet.user.screen_name} Welcome to Philadelphia!")
end
</code></pre>

<p>You may want to limit interactions with replies and things like that to not come off as too spammy to people.</p>

<p>Here&rsquo;s a little example I came up with.  As a tribute to <a href="http://www.nbcnews.com/news/us-news/hitchhiking-robot-hitchbot-meets-demise-philadelphia-after-about-2-weeks-n402606">Hitchbot</a> the lovable little robot that met it&rsquo;s untimely demise here in Philadelphia. Let&rsquo;s find all the 10 most recent tweets containing &ldquo;#hitchbot&rdquo;, favorite the tweet and reply to the tweet with &ldquo;Avenge Me&hellip;&rdquo; as an account I setup called @hitchbot_ghost.  Take note, if you submit too many client actions at one time, the API can respond with an error saying it looks like it could be spam.</p>

<pre><code class="ruby">search_options = {
    result_type: "recent",
    geocode: "39.9525839,-75.1652215,10mi"
}
client.search("#hitchbot", search_options).take(10).each do |tweet|
    puts "#{tweet.user.screen_name}: #{tweet.text}"
    client.favorite(tweet)
    client.update("@#{tweet.user.screen_name} Avenge me...",
                  in_reply_to_status_id: tweet.id)
end
</code></pre>

<p>And that&rsquo;s it! In just few lines of Ruby, we have a working bot for Twitter.  If you have any questions or get stuck let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Rails Application Templates]]></title>
    <link href="http://www.codebycodes.com/blog/2015/08/17/creating-rails-application-templates/"/>
    <updated>2015-08-17T09:11:43-04:00</updated>
    <id>http://www.codebycodes.com/blog/2015/08/17/creating-rails-application-templates</id>
    <content type="html"><![CDATA[<p>Programmers are lazy.  This is probably one of the greatest things about us.  Anything that takes slightly longer than we think it should, and you start thinking “Hmmmmm……I wonder if I could fix that” or “I bet I could make that better&#8221;.</p>

<p>I don’t know about you, but I’m the type that can get easily distracted by shiny new things to try out, whether it’s a new framework, gem, pattern, or fancy bourbon (I mean, we can’t program all the time).</p>

<p>I started looking into Rails application templates to try to alleviate these problems.  If I want to try out a new feature, follow along with a tutorial, or just start tinkering with a new project, it takes me a little while to get everything set up with my preferences.  Things like setting up devise, bootstrap, getting flash messages to play nicely with bootstrap and any other configs I think will help with whatever project I’m kicking off.</p>

<p>Why choose a template over just having a full application you can clone from github as a fresh starting point?<!--more-->  I think Rails templates are a much more powerful and versatile option.  Rails templates are built on Thor which is probably the best feature in Rails you’ve never heard about.  <a href="http://whatisthor.com/">Thor</a> is described as:</p>

<p><em>&hellip; a toolkit for building powerful command-line interfaces. It is used in Bundler, Vagrant, Rails and others.</em></p>

<p>Ever notice all the files that are created and how you don’t have to run bundle install after you create a new rails app?  You have Thor to thank for that.</p>

<p>Having the ability to run commands and edit files is a huge advantage.  It’s also an easy way to stick to best practices with less effort.  How?  You can do things like set up guard, r-spec, and even create a git repo and make an initial commit, all without having to write any code&hellip;well, except for the template.</p>

<p>I’ll admit, sometimes I can be a little sloppy with having tests in my personal apps.  If I’m pressed for time, I’ll normally choose cramming as many features as possible (the F-it Ship it mantra) than tests.  I think this helps combat that by having my test suite all set up and ready to go.</p>

<p>If you want the TL;DR version, you can create a new rails app from the template by running:</p>

<pre><code>  $ rails new your_project_name -m https://github.com/cnorm35/starter_template/blob/master/test_template.rb
</code></pre>

<p>Or you can see the entire template <a href="https://github.com/cnorm35/starter_template/blob/master/test_template.rb">here</a>.</p>

<p>Let&rsquo;s break apart the pieces and see what everything is doing.  Check out the <a href="http://guides.rubyonrails.org/rails_application_templates.html">RailsGuides for Applicaiton Templates</a> for some more info, and a detailed rundown of the available methods.</p>

<p>The first thing we&rsquo;ll do it overwrite the <code>source_path</code> method in Thor with the location of our template.  By doing this, Thor will accept relative file paths to the location of our template.</p>

<pre><code class="ruby">def source_paths
  Array(super)
  [File.expand_path(File.dirname(__FILE__))]
end
</code></pre>

<p>The next step, we set up the Gemfile.  You can either remove and add gems to your existing Gemfile individually, or you can remove the Gemfile all together and start from scratch.  I prefer to start from scratch to I dont have to remove all the comments Rails adds automatically afterwards.  Just be sure to include a source at the top of the Gemfile.</p>

<pre><code class="ruby">remove_file "Gemfile"
run "touch Gemfile"
add_source 'https://rubygems.org'
gem 'rails', '4.2.1'
gem 'sqlite3'
gem 'uglifier'
gem 'coffee-rails'
gem 'jquery-rails'
gem 'turbolinks'
gem 'thin'
gem 'devise'
gem 'bootstrap-sass'
gem 'sass-rails'
gem 'simple_form'
gem 'sdoc', group: :doc
gem_group :development, :test do
  gem 'spring'
  gem 'quiet_assets'
  gem 'pry-rails'
  gem 'byebug'
  gem 'awesome_print'
  gem 'better_errors'
  gem 'binding_of_caller'
end

gem_group :test do
  gem 'guard-rspec'
  gem 'rspec-rails'
end
</code></pre>

<p>Since we&rsquo;ll be using Rspec, after bundle, we can remove the <code>test</code> directory with the <code>after_bundle</code> callback.
<code>ruby
after_bundle do
  remove_dir 'test'
end
</code></p>

<p>Then we&rsquo;ll change the README to markdown.
<code>ruby
remove_file 'README.rdoc'
create_file 'README.md' do &lt;&lt;-TEXT
  #Markdown Stuff!
  Created with the help of Rails application templates
  TEXT
end
</code></p>

<p>Here&rsquo;s where things start to get a little more interesting.  The Rails template API provide a <code>generate</code> <a href="http://guides.rubyonrails.org/rails_application_templates.html#generate-what-args">method</a>.  The <code>generate</code> method works pretty much the same as if you were running it from your console.  You can use it to generate scaffolds, or even included generator for gems.</p>

<pre><code class="ruby">generate 'rspec:install'
run 'guard init'

generate 'devise:install'
generate 'devise User'
generate 'devise:views'

rake 'db:migrate'
</code></pre>

<p>BOOM!  Now, when we create a new app from the template, we have Rspec installed and Devise already set up with a <code>User</code> model and the db migrated.</p>

<p>Now, since Devise will direct you to the root path after creating a new registration or signing in, lets create a new controller and home page to redirect to.</p>

<p>&#8220;`ruby
generate(:controller, &ldquo;pages home&rdquo;)</p>

<p>remove_file &lsquo;app/views/pages/home.html.erb&rsquo;</p>

<p>create_file &lsquo;app/views/pages/home.html.erb&rsquo; do &lt;&lt;-TEXT</p>

<div class="jumbotron center">
  <h1>Tempaltes, Whoop Whoop!</h1>
  <p>Template created with the help of <a href="http://codebycodes.com">CodeByCodes.</a>/p>
  <h4><%= link_to 'Sign Up', new_user_registration_path %></h4>
</div>


<p>TEXT
end</p>

<p>route &ldquo;root &lsquo;pages#home&rsquo;&rdquo;
&#8220;`</p>

<p>You may have noticed, we&rsquo;re using some Bootstrap classes.  Let&rsquo;s go set up the app to use Bootstrap.  Note:  I have some extra style rules added in so Devise and Bootstrap
will play together nicely.  I&rsquo;ll go over that in more details later.</p>

<pre><code class="ruby">create_file 'app/assets/stylesheets/customizations.css.scss' do &lt;&lt;-TEXT
  @import "bootstrap-sprockets";
  @import "bootstrap";
  .center {
    text-align: center;
  }
  /*for Devise Rememver me box*/
  #user_remember_me {
    margin-left: 0px;
  }
  /*flash*/
  .alert-error {
      background-color: #f2dede;
      border-color: #eed3d7;
      color: #b94a48;
      text-align: left;
   }
  .alert-alert {
      background-color: #f2dede;
      border-color: #eed3d7;
      color: #b94a48;
      text-align: left;
   }
  .alert-success {
      background-color: #dff0d8;
      border-color: #d6e9c6;
      color: #468847;
      text-align: left;
   }
  .alert-notice {
      background-color: #dff0d8;
      border-color: #d6e9c6;
      color: #468847;
      text-align: left;
   }
  TEXT
end
</code></pre>

<p>Now to add it to <code>application.js</code>.  Thor provides the really handy methods <code>before</code> and <code>after</code> to target where you would like something inserted.</p>

<pre><code class="ruby">insert_into_file('app/assets/javascripts/application.js', "//= require bootstrap-sprockets\n", :before =&gt; /\/\/= require_tree ./)
</code></pre>

<p>In other words, find <code>require_tree</code> in the file, and right before it, insert <code>"//= require bootstrap-sprockets"</code> with a new line after.</p>

<p>I&rsquo;ll skip over some of the other setups for the views, it&rsquo;s jsut some view files with a little styling applied to it.  Again, the complete templete is available <a href="https://github.com/cnorm35/starter_template/blob/master/test_template.rb">here.</a></p>

<p>One thing I do want to address, is setting up flash messages with Devise.  Devise ships with some less-than flattering flash messages and updating them to use Bootstrap isn&rsquo;t always straightforward.  Luckily, there&rsquo;s a page on the <a href="https://github.com/plataformatec/devise/wiki/How-To:-Integrate-I18n-Flash-Messages-with-Devise-and-Bootstrap">Devise wiki</a>, so you dont have to dig though stack-overflow posts anymore.  The next few blocks will just be setting that up.</p>

<pre><code class="ruby">create_file 'app/views/layouts/_messages.html.erb' do &lt;&lt;-HTML
  &lt;% flash.each do |key, value| %&gt;
  &lt;div class="alert alert-&lt;%= key %&gt;"&gt;
    &lt;a href="#" data-dismiss="alert" class="close"&gt;×&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;%= value %&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
  &lt;/div&gt;
&lt;% end %&gt;
HTML
end

insert_into_file 'app/views/layouts/application.html.erb',
  "\n&lt;%= render 'layouts/header' %&gt;\n &lt;%= render 'layouts/messages'%&gt;", :after =&gt; /&lt;body&gt;/
</code></pre>

<p>Now, create the helper file
<code>ruby
create_file 'app/helpers/devise_helper.rb' do &lt;&lt;-TEXT
  module DeviseHelper
    def devise_error_messages!
      return '' if resource.errors.empty?
      messages = resource.errors.full_messages.map { |msg| content_tag(:li, msg) }.join
      html = &lt;&lt;-HTML
      &lt;div class="alert alert-error alert-danger"&gt; &lt;button type="button"
      class="close" data-dismiss="alert"&gt;x&lt;/button&gt;
        { messages }
      &lt;/div&gt;
      HTML
      html.html_safe
    end
  end
TEXT
end
</code></p>

<p>Here was my biggest <em>Gotcha</em> of the day.  You may notice in the above block it&rsquo;s just <code>{ messages }</code> instead of <code>#{ messages }</code>.  When running the template, rails kept complaining
<code>messages</code> was undefined.  I could have extractred that out into a seperate file, but I wanted to try to keep everying in a single file.  Also, I try to not focus too much on over optimizing at the beginning and stick with &ldquo;Done is Better Than Perfect&rdquo;.</p>

<p>Since Thor provides <code>:before</code> and <code>:after</code>, my solution was to find <code>{ messages }</code> and insert the <code>#</code> directly before it to make the string interpolation work properly.</p>

<pre><code>insert_into_file('app/helpers/devise_helper.rb', '#', :before =&gt; /{ messages }/)
</code></pre>

<p>So there you have it, a working Rails template.  Let me know in the comments if there&rsquo;s anything I missed or some things you think I should have added.  Since this was the first template I&rsquo;ve created, it&rsquo;s still a work in progress.  I&rsquo;ll try to keep it updated as my setup evolves over time.</p>
]]></content>
  </entry>
  
</feed>
